SchurVINS

SchurVINS：基于 Schur 补的轻量级视觉惯性导航系统

我们提出了一个基于滤波器的视觉惯性导航框架，名为 SchurVINS。该框架通过构建完整的残差模型来保证高精度，同时利用 Schur 补降低计算复杂度。

    🧠 解释：Schur 补（Schur Complement）常用于数值线性代数和优化问题中，可用于分解矩阵、简化计算。此处用于 VIO 中联合状态估计与地图构建的残差优化求解。

我们首先构建了一个完整的残差模型，显式建模了梯度、Hessian 矩阵和观测协方差。然后利用 Schur 补将该模型分解为自运动残差模型（ego-motion residual）和路标残差模型（landmark residual）。最终在这两个模型上分别实现了**扩展卡尔曼滤波（EKF）**的高效更新。

在 EuRoC 和 TUM-VI 数据集上的实验表明，SchurVINS 在精度和计算效率上均显著优于现有的主流方法（SOTA）。
✨主要贡献包括：

    提出了一个等效残差模型，用于处理超高维度的观测数据，该模型包括梯度、Hessian 和对应的观测协方差。该方法在 EKF 系统中具有很强的通用性。

    提出了一种轻量级的EKF 路标求解器，高效估计路标的位置。

    开发了一种新的EKF VINS 框架，能够同时高精度、高效率地完成自运动与路标估计。

1. 许可证（License）

本项目代码遵循 GPLv3 开源许可协议。

    📜 解释：意味着你可以使用、修改、传播代码，但衍生作品也必须开放源代码。

SchurVINS 基于 SVO2.0（rpg_svo_pro_open）开发，因此保留其相关文件开头的原始许可证说明。

📄 相关论文：
Yunfei Fan, Tianyu Zhao, Guidong Wang. SchurVINS: Schur Complement-Based Lightweight Visual Inertial Navigation System.
2. 先决条件（Prerequisites）

本项目已在 Ubuntu 18.04 上测试通过。需要以下依赖项：
✅ 系统依赖

sudo apt-get install python-catkin-tools python-vcstool
sudo apt-get install libglew-dev libopencv-dev libyaml-cpp-dev

    💡 解释：
    catkin-tools 是 ROS 的构建工具；
    vcstool 用于批量管理多个 git 仓库；
    libglew 和 opencv 提供图像处理与渲染功能；
    yaml-cpp 用于读取配置文件。

✅ Ceres 优化库相关依赖

sudo apt-get install libblas-dev liblapack-dev libsuitesparse-dev

    💡 解释：Ceres Solver 是一个用于非线性优化的库，SchurVINS 依赖它来处理残差模型。

【总结：安装依赖】
sudo apt-get update
sudo apt-get install python3-catkin-tools python3-vcstool
sudo apt-get install libglew-dev libopencv-dev libyaml-cpp-dev
sudo apt-get install libblas-dev liblapack-dev libsuitesparse-dev

3. 构建（Build）

克隆并编译项目：
# 1. 新建工作区
mkdir -p ~/Algs/schur/src
cd ~/Algs/schur/src

# 2. 克隆 SchurVINS
git clone https://github.com/bytedance/SchurVINS.git

# 3. 创建 logs / results 目录（可选）
mkdir -p ~/Algs/schur/src/SchurVINS/results
mkdir -p ~/Algs/schur/src/SchurVINS/logs

# 4. 初始化依赖
vcs-import < ./SchurVINS/dependencies.yaml

# 5. 跳过 minkindr 的 Python 模块（防止出错）
touch minkindr/minkindr_python/CATKIN_IGNORE

# 6. 源 ROS 环境（使用你实际 ROS 版本，比如 Noetic）
source /opt/ros/noetic/setup.bash

# 7. 返回工作区根目录
cd ~/Algs/schur

然后把dbow2_catkin/CMakeLists.txt里的GIT_REPOSITORY git@github.com:dorian3d/DBoW2.git改为
GIT_REPOSITORY http://github.com/dorian3d/DBoW2.git

然后需要重装cv_bridge 我直接再src里面gitclone了
cd ~/Algs/schur/src
rm -rf vision_opencv  # 删除之前可能不适配的版本
git clone -b noetic https://github.com/ros-perception/vision_opencv.git
然后编译
cd ~/Algs/schur
catkin build cv_bridge
# 用 OpenCV3 的 cv_bridge：
source ~/catkin_ws/devel/setup.bash

# 用 OpenCV4 的 cv_bridge：
source ~/Algs/svo2/devel/setup.bash
source ~/Algs/schur/devel/setup.bash

# 8. 使用 catkin build 编译（确保已安装 python3-catkin-tools）
catkin build
🧱 解释：
    创建 results 和 logs 文件夹用于存储结果和日志；
    使用 vcs-import 拉取依赖；
    CATKIN_IGNORE 是为了跳过 minkindr 的 Python 子模块编译（可加快构建）。

【总结：构建编译】
mkdir -p ~/Algs/schur/src
cd ~/Algs/schur/src
git clone https://github.com/bytedance/SchurVINS.git
mkdir -p ~/Algs/schur/src/SchurVINS/results
mkdir -p ~/Algs/schur/src/SchurVINS/logs
vcs-import < ./SchurVINS/dependencies.yaml
sed -i 's/git@github.com:/https:\/\/github.com\//' dbow2_catkin/CMakeLists.txt
touch minkindr/minkindr_python/CATKIN_IGNORE
source /opt/ros/noetic/setup.bash
cd ~/Algs/schur/src
rm -rf vision_opencv
git clone -b noetic https://github.com/ros-perception/vision_opencv.git
cd ~/Algs/schur
catkin build cv_bridge
source ~/Algs/schur/devel/setup.bash
cd ~/Algs/schur
catkin build
source ~/Algs/schur/devel/setup.bash

4. 运行（Run）

我们提供了使用 EuRoC 数据集运行 SchurVINS 的示例。

打开 3 个终端，分别运行：

    启动 SchurVINS 系统

    启动 RViz 可视化

    播放 rosbag 数据包（例如 MH_01）

roslaunch svo_ros euroc_vio_stereo.launch
rviz -d svo_ros/rviz_config.rviz
rosbag play ~/Datasets/euroc_data/MH_01_easy.bag 

    🎥 解释：这个命令启动 stereo 模式的 SchurVINS（双目+IMU），可视化路径，播放数据。

5. 可复现性说明（Reproducibility）

发布版本与论文结果可能存在微小差异。由于多线程对 CPU 占用具有一定随机性，导致运行时间略有差别。

在 EuRoC 数据集上，为了复现结果，请跳过数据开头几秒：
序列	建议跳过时间
MH1	30s
MH2	30s
MH3	10s
MH4	13s
MH5	15s
V11–V22	0–2s

